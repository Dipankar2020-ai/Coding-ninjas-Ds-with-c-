#include <iostream>
#include<bits/stdc++.h>
#include<queue>
#include<vector>
#include<stack>
using namespace std;
int k=0;
template<typename T>

class Binarynode
{
    public:
    T data;
    Binarynode* left;
    Binarynode* right;
    Binarynode(T data)
    {
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~Binarynode()
    {
        delete left;
        delete right;
    }
    
};




Binarynode<int>* takeinputlevelwise()
{
    int rootdata;
    cout<<"Enter root data: "<<endl;
    cin>>rootdata;
   
    if(rootdata==-1)
    {
        return NULL;
    }
    Binarynode<int>* root=new Binarynode<int>(rootdata);
    queue<Binarynode<int>*>pendingnodes;
    pendingnodes.push(root);
    while(pendingnodes.size()!=0)
    {
        Binarynode<int>* front=pendingnodes.front();
        pendingnodes.pop();
        int leftchild;
        cout<<"Enter left child of :"<<front->data<<"=>";
        cin>>leftchild;
        if(leftchild!=-1)
        {
            Binarynode<int>* child=new Binarynode<int>(leftchild);
            front->left=child;
            pendingnodes.push(child);
            
            
        }
        int rightchild;
        cout<<"Enter right child of :"<<front->data<<"=>";
        cin>>rightchild;
        if(rightchild!=-1)
        {
            Binarynode<int>* child=new Binarynode<int>(rightchild);
            front->right=child;
            pendingnodes.push(child);
            
            
        }
    }
    return root;
    
}
void printlevelorder(Binarynode<int>* root)
{
    if(root==NULL)
    {
        return;
    }
    queue<Binarynode<int>*>pendingnodes;
    pendingnodes.push(root);
    pendingnodes.push(NULL);
    while(pendingnodes.size()!=0)
    {
        if(pendingnodes.front()==NULL)
        {
            pendingnodes.pop();
            if(pendingnodes.size()==0)
            {
                break;
            }
            pendingnodes.push(NULL);
            cout<<endl;
        }
        if(pendingnodes.front()->left!=NULL)
        {
            pendingnodes.push(pendingnodes.front()->left);
        }
         if(pendingnodes.front()->right!=NULL)
        {
            pendingnodes.push(pendingnodes.front()->right);
        }
        cout<<pendingnodes.front()->data<<" ";
        pendingnodes.pop();
    }
}
int countnodes(Binarynode<int>* root)
{
    
    if(root==NULL)
    {
        return 0;
    }
    return 1+countnodes(root->left)+countnodes(root->right);
}

void printnodessumtos(Binarynode<int>* root,int s)
{
    int totalnodes=countnodes(root);
    int count=0;
    stack<Binarynode<int>*>inorder;
    stack<Binarynode<int>*>revinorder;
    Binarynode<int>* temp=root;
    while(temp)
    {
        inorder.push(temp);
        temp=temp->left;
    }
    temp=root;
    while(temp)
    {
        revinorder.push(temp);
        temp=temp->right;
    }
    while(count<totalnodes-1)
    {
        Binarynode<int>* top1=inorder.top();
        Binarynode<int>* top2=revinorder.top();
    if(top1->data+top2->data==s)
        {
            cout<<top1->data<<" "<<top2->data<<endl;
            
        
        Binarynode<int>* top=top1;
        inorder.pop();
        count++;
        if(top->right)
        {
            top=top->right;
            while(top)
            {
                inorder.push(top);
                top=top->left;
            }
        }
        top=top2;
        revinorder.pop();
        count++;
        
         if(top->left)
         {
            top=top->left;
            while(top)
            {
                inorder.push(top);
                top=top->right;
            }
        }
    }
        else if(top1->data + top2->data > s)
        {
             Binarynode<int> *top=top2;
           revinorder.pop();
           count++;
            if(top->left)
            {
                top=top->left;
                while(top)
                {  revinorder.push(top);
                 top=top->right;
                }
            }
        }
    else{
        
        Binarynode<int>* top=top1;
        inorder.pop();
        count++;
        if(top->right)
        {
            top=top->right;
            while(top)
            {
                inorder.push(top);
                top=top->left;
            }
        }
    }
        
    }
    
}

 int main()
 {
     Binarynode<int>* root=takeinputlevelwise();
     int target;
     
     cin>>target;
     
   printnodessumtos(root,target);
     
 } 
