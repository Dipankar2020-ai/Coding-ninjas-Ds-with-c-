
#include <iostream>
#include<vector>
using namespace std;
class priorityqueue
{
    vector<int>pq;
    public:
    bool isempty()
    {
        return (pq.size()==0);
    }
    int getsize()
    {
        return pq.size();
    }
    int getmin()
    {
        if(isempty())
        {
            return 0;
        }
        else
        {
            return pq[0];
        }
    }
    void insert(int element)
    {
        pq.push_back(element);
        int childindex=pq.size()-1;
        while(childindex>0)
        {
            int parentindex=(childindex-1)/2;
            if(pq[parentindex]>pq[childindex])
            {
                int temp=pq[childindex];
                pq[childindex]=pq[parentindex];
                pq[parentindex]=temp;
            }
            else
            {
                break;
            }
            childindex=parentindex;
        }
        
    }
    int removemin()
    {
        if(isempty())
        {
            return 0;
        }
        int ans=pq[0];
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        int parentindex=0;
        int leftchildindex=2*parentindex+1;
        int rightindex=2*parentindex+2;
        while(leftchildindex<pq.size())
        {
            int minindex=parentindex;
            if(pq[minindex]>pq[leftchildindex])
            {
                minindex=leftchildindex;
            }
            if(rightindex<pq.size() && pq[minindex]>pq[rightindex])
            {
                minindex=rightindex;
            }
            if(minindex==parentindex)
            {
                break;
            }
            int temp=pq[minindex];
            pq[minindex]=pq[parentindex];
            pq[parentindex]=temp;
            parentindex=minindex;
            leftchildindex=2*parentindex+1;
            rightindex=2*parentindex+2;
        }
        return ans;
    }
}  ;

int main()
{
    priorityqueue p;
    p.insert(100);
    p.insert(10);
    p.insert(15);
    p.insert(4);
    p.insert(17);
    p.insert(21);
    p.insert(67);
    cout<<p.getsize()<<endl;
    cout<<p.getmin()<<endl;
    while(!p.isempty())
    {
        cout<<p.removemin()<<" ";
    }
    
}
