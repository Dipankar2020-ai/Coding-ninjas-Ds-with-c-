
#include <iostream>
#include<queue>
using namespace std;
void BFS(int **edges,int n,int sv,bool* visited)
{
    queue<int>que;
    que.push(sv);
    visited[sv]=true;
    while(!que.empty())
    {
        int v=que.front();
        que.pop();
        cout<<v<<" ";
        for(int i=0;i<n;i++)
        {
            if(i==sv)
            {
                continue;
            }
            if(edges[v][i]==1 && !visited[i])
            {
                visited[i]=true;
                que.push(i);
            }
        }
    }
}
void print(int**edges,int n,int sv,bool* visited)
{
    cout<<sv<<endl;
    visited[sv]=true;
    for(int i=0;i<n;i++)
    {
        if(i==sv)
        {
            continue;
        }
        if(edges[sv][i])
        {
            if(visited[i])
            {
                continue;
            }
            print(edges, n,i,visited);
        }
    }
}

int main()
{
    int n,e;
    cin>>n>>e;
    int **edges=new int*[n];
    for(int i=0;i<n;i++)
    {
        edges[i]=new int[n];
        for(int j=0;j<n;j++)
        {
            edges[i][j]=0;
        }
    }
    for(int i=0;i<e;i++)
    {
        int f,s;
        cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
        
    }
    bool *visited=new bool[n];
    for(int i=0;i<n;i++)
    {
        visited[i]=false;
    }
    cout<<"BFS TRAVERSAL :"<<endl;
    BFS(edges,n,0,visited);
    
  //  print(edges,n,0,visited);
    return 0;
}
